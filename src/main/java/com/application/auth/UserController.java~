package com.application.auth;

import com.example.authentication.model.request.CreateUserRequest;
import com.example.authentication.model.response.CreateUserResponse;
import com.example.authentication.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1")
@RequiredArgsConstructor
@Slf4j
public class UserController {
    private final UserService userService;
    /**
     * Registers a new user
     *
     * @param createUserRequest the request that contains the user data
     * @return the newly created user
     */
    @Operation(summary = "Register a new user")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Create a new user",
                    content = {@Content(mediaType = "application/json",schema = @Schema(implementation = CreateUserRequest.class))}),
            @ApiResponse(responseCode = "400",description = "User not created",content = @Content)})
    @PostMapping(value = "/registerUser", consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.CREATED)
    public CreateUserResponse registerUser(@Valid @RequestBody CreateUserRequest createUserRequest) {
        log.info("CreateUserRequest {}",createUserRequest);
        return userService.createUser(createUserRequest);
    }

    @GetMapping(value = "/users", produces = MediaType.APPLICATION_JSON_VALUE)
     public List<CreateUserResponse> getUsers() {
        log.info("Getting all users ");
        return userService.getAllUsers();
    }

    @GetMapping(value = "/users/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public CreateUserResponse getUser(@PathVariable String id) {
        log.info("Getting user {} ",id);
        return userService.getUserById(id);
    }
}
